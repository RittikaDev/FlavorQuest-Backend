generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String              @id @unique @default(uuid())
  name                      String
  email                     String              @unique
  password                  String
  profilePhoto              String?
  contactNumber             String?
  needPasswordChange        Boolean             @default(true)
  role                      UserRole            @default(USER)
  status                    UserStatus          @default(ACTIVE)
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt

  foodpost                  FoodPost[]
  comments                  Comment[]
  votes                     Vote[]
  ratings                   Rating[]
  subscriptions             Subscription[]
  groupMemberships          GroupMember[]  

  sentFriendRequests        FriendRequest[]     @relation("SentRequests")
  receivedFriendRequests    FriendRequest[]     @relation("ReceivedRequests")
  groupsOwned               Group[]             @relation("OwnerGroup")
  sentShares       Share[]  @relation("SentShares")
  receivedShares   Share[]  @relation("ReceivedShares")
  
  @@index([email])
  @@index([status])
  @@map("users")
}


model FoodPost {
  id             String        @id @unique @default(uuid())
  title          String
  description    String
  location       String
  minPrice       Float
  maxPrice       Float
  image          String
  categoryId     String
  category       Category      @relation(fields: [categoryId], references: [id])
  status         PostStatus    @default(PENDING)
  isPremium      Boolean       @default(false)
  adminComment   String? 
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  comments       Comment[]
  votes          Vote[]
  ratings        Rating[]
  groupShare     Share[] @relation("PostShare")
  @@map("food_posts")
}


model Category {
  id        String     @id @unique @default(uuid())
  name      String     @unique
  posts     FoodPost[]

  @@map("categories")
}

model Comment {
  id              String       @id @unique @default(uuid())
  text            String
  userId          String        
  postId          String
  user            User         @relation(fields: [userId], references: [id])
  post            FoodPost     @relation(fields: [postId], references: [id])
  createdAt       DateTime     @default(now())

  @@index([userId])
  @@index([postId])

  @@map("comments")
}

model Vote {
  id              String       @id @unique @default(uuid())
  type            VoteType
  userId          String
  postId          String
  user            User         @relation(fields: [userId], references: [id])
  post            FoodPost     @relation(fields: [postId], references: [id])
  createdAt       DateTime     @default(now())

  @@index([userId])
  @@index([postId])

  @@map("votes")
}

model Rating {
  id              String        @id @unique @default(uuid())
  score           Int      
  userId          String
  postId          String
  user            User          @relation(fields: [userId], references: [id])
  post            FoodPost      @relation(fields: [postId], references: [id])
  createdAt       DateTime      @default(now())

  @@unique([userId, postId]) 

  @@map("ratings")
}

model Subscription {
  id              String                @id @unique @default(uuid())
  userId          String
  user            User                  @relation(fields: [userId], references: [id])
  status          SubscriptionStatus   
  transactionId   String
  expiryDate      DateTime?
  createdAt       DateTime              @default(now())

  @@index([userId])
  @@map("subscriptions")
}

model FriendRequest {
  id         String     @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime   @default(now())

  sender     User       @relation("SentRequests", fields: [senderId], references: [id])
  receiver   User       @relation("ReceivedRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Group {
  id            String          @id @default(uuid())
  name          String
  ownerId       String
  owner         User            @relation("OwnerGroup",fields: [ownerId], references: [id])
  members       GroupMember[]
  createdAt     DateTime        @default(now())
  groupShare    Share[]         @relation("GroupShare")

  @@map("groups")
}

model GroupMember {
  id        String   @id @default(uuid())
  groupId   String
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  joinedAt  DateTime @default(now())

  @@unique([groupId, userId])
  @@map("group_members")
}

model Share {
  id            String     @id @default(uuid())
  senderId      String
  receiverId    String?
  groupId       String?
  postId        String
  message       String?
  createdAt     DateTime   @default(now())

  sender        User       @relation("SentShares", fields: [senderId], references: [id])
  receiver      User?      @relation("ReceivedShares", fields: [receiverId], references: [id])
  group         Group?     @relation("GroupShare",fields: [groupId], references: [id])
  post          FoodPost   @relation("PostShare",fields: [postId], references: [id])

  @@map("shares")
}


enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UserRole {
  USER
  PREMIUM_USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}